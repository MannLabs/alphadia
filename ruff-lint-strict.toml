# specific ruff configuraton new code (with stricter rules)
[lint]
select = [
    "ALL"
]

# TODO excluding explicity is not great but it is a workaround for now
exclude = [
    "alphadia/__*__.py",
    "alphadia/cli.py",
    "alphadia/exceptions.py",
    "alphadia/search_plan.py",
    "alphadia/search_step.py",
    "alphadia/utils.py",
    "alphadia/fdr/_fdrx/stats.py",
    "alphadia/fdr/_fdrx/plotting.py",
    "alphadia/fdr/_fdrx/base.py",
    "alphadia/constants/**.py",
    "alphadia/libtransform/**.py",
    "alphadia/outputtransform/**.py",
    "alphadia/raw_data/alpharaw_wrapper.py",
    "alphadia/raw_data/bruker.py",
    "alphadia/reporting/**.py",
    "alphadia/search/**.py",
    "alphadia/transferlearning/*.py",
    "alphadia/validation/**.py",
    "alphadia/workflow/*.py",
    "alphadia/workflow/optimizers/*.py",
    "tests/*.py",
    "release/*.py",
    "docs/**",
    "nbs/**/*.ipynb",
    "misc/*.py",
]

pep8-naming.ignore-names = ["X_train", "X_test", "X_target", "X_decoy", "X"]

ignore = [
    #
    "PD002", #pandas-use-of-inplace-argument # TODO revisit

    # same as pyproject.toml
    "E501",  # Line too long  (ruff wraps code, but not docstrings)
    "B028",  #  No explicit `stacklevel` keyword argument found (for warnings)
    "B006", # Do not use mutable data structures for argument defaults # TODO: fix this!

    # some more sensible ignores
    "E501",  # Line too long  (ruff wraps code, but not docstrings)
    "B028",  #  No explicit `stacklevel` keyword argument found (for warnings)
    "COM812", #may cause conflicts when used with the formatter
    "ISC001", #may cause conflicts when used with the formatter
    "D211", # no-blank-line-before-class
    "D213", # multi-line-summary-second-line
    "S101", # Use of `assert` detected
    "INP001", # implicit namespace package.
    "ERA001", # Found commented-out code
    "D203", # 1 blank line required before class docstring
    "TD002", "TD003", "FIX002",  # things around TO-DO
    "PT011", #pytest.raises(ValueError) is too broad
    "G004", "EM102", # Logging statement uses f-string
    "TRY003", # Avoid specifying long messages outside the exception class
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs
    "FA102", # Missing `from __future__ import annotations
    "EM101", # Exception must not use a string literal, assign to variable first
    "D104", # Missing docstring in public package
    "ANN204", # Missing return type annotation for special method `__init__`
    "D401", # First line of docstring should be in imperative mood
    "B023", # Function definition does not bind loop variable
    "PD901", # Avoid using the generic variable name `df` for DataFrames"
    "TC003" # Move standard library import into a type-checking block

]
