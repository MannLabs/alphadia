on:
  workflow_dispatch:
    inputs:
      tag_to_release:
        description: 'Enter tag to release (example: v1.5.5)'
        required: true

name: Publish on PyPi

env:
  PYTHON_VERSION: "3.11"

jobs:
  Create_PyPi_Release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_current_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_to_release }}
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Conda info
        shell: bash -le {0}
        run: conda info
      - name: Get current version
        id: get_current_version
        shell: bash -l {0}
        run: |
         CURRENT_VERSION=$(./misc/get_current_version.sh)
         echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Prepare distribution
        shell: bash -le {0}
        run: |
          conda create -n alphadia_build python=${{ env.PYTHON_VERSION }} -y
          conda activate alphadia_build
          python -m pip install --upgrade pip
          pip install build twine
          rm -rf dist
          rm -rf build
          python -m build
          twine check dist/*
          conda deactivate
          conda env remove --name alphadia_build -y
          conda clean --all -y
      - name: Publish distribution to Test-PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Test Test-PyPI loose installation
        shell: bash -le {0}
        run: |
          conda create -n pip_loose_test python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_loose_test
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "alphadia==${{ steps.get_current_version.outputs.new_version }}"
          alphadia -v
          conda deactivate
          conda env remove --name pip_stable_test -y
          conda clean --all -y
      - name: Test Test-PyPI stable installation
        shell: bash -le {0}
        run: |
          conda create -n pip_stable_test python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_stable_test
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "alphadia[stable]==${{ steps.get_current_version.outputs.new_version }}"
          alphadia -v
          conda deactivate
          conda env remove --name pip_stable_test -y
          conda clean --all -y
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
  Test_PyPi_Release:
    name: Test_PyPi_version_on_${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: Create_PyPi_Release
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Conda info
        shell: bash -le {0}
        run: conda info
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Test PyPI stable installation
        shell: bash -le {0}
        run: |
          conda create -n pip_stable python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_stable
          pip install "alphadia[stable]==${{ needs.Create_PyPi_Release.outputs.new_version }}"
          alphadia -v
          conda deactivate
          conda env remove --name pip_stable -y
          conda clean --all -y
      - name: Test PyPI loose installation
        shell: bash -le {0}
        run: |
          conda create -n pip_loose python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_loose
          pip install alphadia==${{ needs.Create_PyPi_Release.outputs.new_version }}
          alphadia -v
          conda deactivate
          conda env remove --name pip_loose -y
          conda clean --all -y
